func (c *Converter) convertStructTopLevel(t reflect.Type) string
func (c *Converter) getType(t reflect.Type, name string, indent int) string

func (c *Converter) convertStruct(input reflect.Type, indent int) string
func (c *Converter) getTypeStruct(input reflect.Type, indent int) string

func (c *Converter) convertField(f reflect.StructField, indent int, optional, nullable, anonymous bool) (string, bool)
func (c *Converter) getTypeField(f reflect.StructField, indent int, optional, nullable bool) string

func (c *Converter) convertSliceAndArray(t reflect.Type, name, validate string, indent int) string
func (c *Converter) getTypeSliceAndArray(t reflect.Type, name string, indent int) string

func (c *Converter) convertMap(t reflect.Type, name, validate string, indent int) string
func (c *Converter) getTypeMap(t reflect.Type, name string, indent int) string

func (c *Converter) validateString(validate string) string
func (c *Converter) validateNumber(validate string) string

type Converter struct {
	prefix  string
	structs int
	outputs map[string]entry
	custom  map[string]CustomFn
	stack   []meta
}

type entry struct {
	order int
	data  string
}

type meta struct {
	Name    string
	SelfRef bool
}

// name, generic, validate, indent
type CustomFn func(*Converter, reflect.Type, string, string, string, int) string

type byOrder []entry

func (a byOrder) Len() int           { return len(a) }
func (a byOrder) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a byOrder) Less(i, j int) bool { return a[i].order < a[j].order }

func (c *Converter) AddType(input interface{})
func (c *Converter) Convert(input interface{}) string
func (c *Converter) ConvertSlice(inputs []interface{}) string
func (c *Converter) ConvertType(t reflect.Type, name string, validate string, indent int) string
func (c *Converter) Export() string
